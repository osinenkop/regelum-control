_target_: regelum.model.PerceptronWithTruncatedNormalNoise

std%%: 0.1
normalize_output_coef%%: 1 / 800.

dim_input: $ system_specific.dim_observation
dim_output: $ system_specific.dim_action
dim_hidden: 4
n_hidden_layers: 1
hidden_activation: = torch.nn.LeakyReLU(0.2)
stds: = ${.std%%} * (np.array(${system_specific.action_bounds})[:, 1] - np.array(${system_specific.action_bounds})[:, 0]) / 2. 
is_truncated_to_output_bounds: False
output_activation: = torch.nn.Sequential(regelum.model.MultiplyByConstant(${.normalize_output_coef%%}), torch.nn.Tanh(),regelum.model.MultiplyByConstant(1 - 3 * ${.std%%}),regelum.model.BoundsHandler(${system_specific.action_bounds}))
