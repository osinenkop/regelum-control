hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - ode_backend=SCIPY,CASADI
    - time_final=0.1
  job:
    name: __init__
    chdir: null
    override_dirname: ode_backend=SCIPY,CASADI,time_final=0.1
    id: ???
    num: ???
    config_name: scenario
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.0
    version_base: '1.3'
    cwd: /home/odinmaniac/Downloads/Repos/rcognita/presets/3wrobot
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/odinmaniac/Downloads/Repos/rcognita/presets/3wrobot
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      controller: mpc
      controller/critic: trivial
      controller/actor: mpc
      controller/actor/predictor: euler
      controller/actor/optimizer: scipy
      controller/actor/model: weight_container
      running_objective: running_objective
      running_objective/model: quad_form
      simulator: default
      simulator/system: 3wrobot
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
controller:
  actor:
    model:
      _target_: rcognita.models.ModelWeightContainer
      dim_output: ${controller.actor.dim_output}
      weights_init: ${get:numpy.ones\(${.dim_output}\)}
    optimizer:
      _target_: rcognita.optimizers.SciPyOptimizer
      opt_options:
        maxiter: 100
        maxfev: 5000
        disp: false
        adaptive: true
        xatol: 1.0e-07
        fatol: 1.0e-07
      opt_method: SLSQP
    predictor:
      _target_: rcognita.predictors.EulerPredictor
      pred_step_size: ${get:${controller.sampling_time} * ${.pred_step_size_multiplier__IGNORE__}}
      system: ${simulator.system}
      dim_input: ${controller.actor.dim_input}
      prediction_horizon: ${prediction_horizon__IGNORE__}
      pred_step_size_multiplier__IGNORE__: 2
    _target_: rcognita.actors.ActorMPC
    prediction_horizon: ${controller.actor.predictor.prediction_horizon}
    dim_output: ${simulator.system.dim_input}
    dim_input: ${simulator.system.dim_output}
    discount_factor: 1.0
    action_bounds: ${controller.action_bounds}
    action_init: ${action_init}
    critic: ${same:controller.critic}
    running_objective: ${running_objective}
  critic:
    _target_: rcognita.critics.CriticTrivial
    running_objective: ${running_objective}
  _target_: rcognita.controllers.RLController
  time_start: ${simulator.time_start}
  sampling_time: ${sampling_time__IGNORE__}
  is_fixed_critic_weights: false
  action_bounds: ${get:numpy.array\(\[\[${.F_min__IGNORE__}\, ${.F_max__IGNORE__}\]\,
    \[${.M_min__IGNORE__}\, ${.M_max__IGNORE__}\]\]\)}
  F_min__IGNORE__: ${F_min__IGNORE__}
  F_max__IGNORE__: ${F_max__IGNORE__}
  M_min__IGNORE__: ${M_min__IGNORE__}
  M_max__IGNORE__: ${M_max__IGNORE__}
  critic_period: ${get:${.critic_period_multiplier__IGNORE__} * ${.sampling_time}}
  critic_period_multiplier__IGNORE__: 1
simulator:
  system:
    _target_: rcognita.systems.Sys3WRobot
    dim_input: 2
    dim_output: 5
    sys_type: diff_eqn
    dim_state: 5
    dim_disturb: 5
    pars: ${get:\[${.m__IGNORE__}\, ${.I__IGNORE__}\]}
    m__IGNORE__: 10.0
    I__IGNORE__: 1.0
  _target_: rcognita.simulator.Simulator
  sys_type: ${simulator.system.sys_type}
  state_init: ${state_init}
  action_init: ${action_init}
  disturb_init: ${get:None}
  time_start: ${time_start__IGNORE__}
  time_final: ${time_final__IGNORE__}
  sampling_time: ${controller.sampling_time}
  max_step: ${get:${controller.sampling_time} / 10.}
  first_step: 1.0e-06
  atol: ${atol__IGNORE__}
  rtol: ${rtol__IGNORE__}
  ode_backend: ${ode_backend__IGNORE__}
running_objective:
  model:
    _target_: rcognita.models.ModelQuadForm
    weights: ${get:numpy.diag\(${.R1_diag__IGNORE__}\)}
    R1_diag__IGNORE__: ${R1_diag__IGNORE__}
    R2_diag__IGNORE__: ${R2_diag__IGNORE__}
  _target_: rcognita.objectives.RunningObjective
ode_backend__IGNORE__: SCIPY
time_start__IGNORE__: 0.0
time_final__IGNORE__: 0.1
atol__IGNORE__: 1.0e-05
rtol__IGNORE__: 0.001
sampling_time__IGNORE__: 0.01
F_min__IGNORE__: -300.0
F_max__IGNORE__: 300.0
M_min__IGNORE__: -100.0
M_max__IGNORE__: 100.0
prediction_horizon__IGNORE__: 5
R1_diag__IGNORE__: ${get:\[10\, 10\, 1\, 0\, 0\, 0\, 0\]}
R2_diag__IGNORE__: ${get:\[1\, 10\, 1\, 0\, 0\, 0\, 0\]}
_target_: rcognita.scenarios.EpisodicScenario
no_print: true
is_log: false
is_playback: true
state_init: ${get:numpy.array\(\[-5.\, 5.\, 3. * numpy.pi / 4.\, 10.\, 3.\]\)}
action_init: ${get:numpy.ones\(2\)}
N_episodes: 1
N_iterations: 1
speedup: 75
observation_target__IGNORE__: ${get:\[\]}
